<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springsource.org/dtd/spring-beans.dtd">

  <!--+
	| Application context containing Hibernate AuthenticationProvider 
	| implementation.
	+-->

<beans>

  <bean id="daoAuthenticationProvider" class="org.springframework.security.providers.dao.DaoAuthenticationProvider">
    <property name="userDetailsService">
      <ref local="userDetailsService" />
    </property>
    <property name="passwordEncoder">
      <ref local="passwordEncoder" />
    </property>
  </bean>

  <!-- UserDetailsService that delegates to an IUserRoleDao -->
  <bean id="userDetailsService" class="org.pentaho.platform.engine.security.userroledao.userdetailsservice.UserRoleDaoUserDetailsService">
    <property name="userRoleDao">
      <ref local="userRoleDao" />
    </property>
  </bean>

  <!-- IUserRoleDao implementation -->
  <bean id="userRoleDao" class="org.pentaho.platform.engine.security.userroledao.hibernate.HibernateUserRoleDao"
    init-method="init">
    <property name="sessionFactory">
      <ref local="sessionFactory" />
    </property>
    <property name="initHandler">
      <!-- detects if USERS table is empty and if so, inserts sample users and roles -->
      <bean class="org.pentaho.platform.engine.security.userroledao.hibernate.sample.SampleUsersAndRolesInitHandler">
        <property name="sessionFactory">
          <ref local="sessionFactory" />
        </property>
        <property name="userRoleDao">
          <ref local="txnUserRoleDao" />
        </property>
      </bean>
    </property>
  </bean>

  <!-- an IUserRoleDao that decorates another IUserRoleDao with transactions -->
  <bean id="txnUserRoleDao" class="org.pentaho.platform.engine.security.userroledao.hibernate.UserRoleDaoTransactionDecorator">
    <property name="userRoleDao">
      <ref local="userRoleDao" />
    </property>
    <property name="transactionTemplate">
      <bean class="org.springframework.transaction.support.TransactionTemplate">
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
        <property name="transactionManager">
          <bean class="org.springframework.orm.hibernate3.HibernateTransactionManager">
            <property name="sessionFactory">
              <ref local="sessionFactory" />
            </property>
          </bean>
        </property>
      </bean>
    </property>
  </bean>

  <!-- session factory containing mapping files and config properties -->
  <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
    <property name="dataSource">
      <ref local="dataSource" />
    </property>
    <property name="mappingResources">
      <list>
        <value>PentahoUser.hbm.xml</value>
        <value>PentahoRole.hbm.xml</value>
      </list>
    </property>
    <property name="hibernateProperties">
      <props>
        <prop key="hibernate.dialect">${hibernate.dialect}</prop>
        <prop key="hibernate.hbm2ddl.auto">update</prop>
      </props>
    </property>
  </bean>

  <!-- ${}-style property values are pulled in by PropertyPlaceholderConfigurer -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
  </bean>

  <!-- not a plaintext password encoder -->
  <bean id="passwordEncoder" class="org.pentaho.platform.engine.security.DefaultPentahoPasswordEncoder" />

  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="location" value="applicationContext-spring-security-hibernate.properties" />
  </bean>

</beans>