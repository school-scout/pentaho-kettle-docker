<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>getPercentageFreeMemory</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <directory>&#47;</directory>
    <parameters>
    </parameters>
    <log>
      <read/>
      <write/>
      <input/>
      <output/>
      <update/>
      <rejected/>
      <connection/>
      <table/>
      <step_performance_table/>
      <use_batchid>Y</use_batchid>
      <use_logfield>N</use_logfield>
      <size_limit_lines/>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
  <modified_user>-</modified_user>
  <modified_date>2010&#47;02&#47;03 12:43:00.049</modified_date>
  </info>
  <notepads>
    <notepad>
      <note>Memory monitor &#47; analyzer
further information can be found here: http:&#47;&#47;jira.pentaho.com&#47;browse&#47;PDI-1698

This transformation could be called in an interval e.g. every 10 minutes
or you can integrate this into existing transformations and check e.g. every 10000 rows
and write the result into a database table.</note>
      <xloc>43</xloc>
      <yloc>42</yloc>
      <width>436</width>
      <heigth>85</heigth>
    </notepad>
    <notepad>
      <note>The numbers differs a bit out of the GC - to elimite the GC effect we could add an option before getting the free memory and do the optional System.gc();
This would slow down things a bit but you get pretty nice (almost exact) results.
BTW: When you get only values about 99% you should lower the memory settings to get better results</note>
      <xloc>38</xloc>
      <yloc>261</yloc>
      <width>756</width>
      <heigth>47</heigth>
    </notepad>
  </notepads>
  <order>
  <hop> <from>Generate Rows</from><to>getPercentageFreeMemory</to><enabled>Y</enabled> </hop>  </order>
  <step>
    <name>Generate Rows</name>
    <type>RowGenerator</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
    <fields>
    </fields>
    <limit>1</limit>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>86</xloc>
      <yloc>171</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step>
    <name>getPercentageFreeMemory</name>
    <type>Janino</type>
    <description/>
    <distribute>Y</distribute>
    <copies>1</copies>
         <partitioning>
           <method>none</method>
           <schema_name/>
           </partitioning>
       <formula><field_name>percentageFreeMemory</field_name>
<formula_string>org.pentaho.di.core.Const.getPercentageFreeMemory()</formula_string>
<value_type>Integer</value_type>
<value_length>-1</value_length>
<value_precision>-1</value_precision>
<replace_field/>
</formula>
     <cluster_schema/>
 <remotesteps>   <input>   </input>   <output>   </output> </remotesteps>    <GUI>
      <xloc>252</xloc>
      <yloc>171</yloc>
      <draw>Y</draw>
      </GUI>
    </step>

  <step_error_handling>
  </step_error_handling>
   <slave-step-copy-partition-distribution>
</slave-step-copy-partition-distribution>
   <slave_transformation>N</slave_transformation>
</transformation>
